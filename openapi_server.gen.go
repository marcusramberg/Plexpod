// Package main provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.3 DO NOT EDIT.
package main

import (
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Configuration Resource
	// (GET /configuration)
	ExtensionConfiguration(ctx echo.Context, params ExtensionConfigurationParams) error
	// addMedia
	// (POST /intent/addMedia)
	AddMediaIntentHandling(ctx echo.Context, params AddMediaIntentHandlingParams) error
	// playMedia
	// (POST /intent/playMedia)
	PlayMediaIntentHandling(ctx echo.Context, params PlayMediaIntentHandlingParams) error
	// updateMediaAffinity
	// (POST /intent/updateMediaAffinity)
	UpdateMediaAffinityIntentHandling(ctx echo.Context, params UpdateMediaAffinityIntentHandlingParams) error
	// playMedia
	// (POST /queues/playMedia)
	PlayMediaOnQueue(ctx echo.Context, params PlayMediaOnQueueParams) error
	// updateActivity
	// (POST /queues/updateActivity)
	UpdateActivityOnQueue(ctx echo.Context, params UpdateActivityOnQueueParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ExtensionConfiguration converts echo context to params.
func (w *ServerInterfaceWrapper) ExtensionConfiguration(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ExtensionConfigurationParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "x-applecloudextension-session-id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-applecloudextension-session-id")]; found {
		var XApplecloudextensionSessionId string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x-applecloudextension-session-id, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "x-applecloudextension-session-id", runtime.ParamLocationHeader, valueList[0], &XApplecloudextensionSessionId)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x-applecloudextension-session-id: %s", err))
		}

		params.XApplecloudextensionSessionId = XApplecloudextensionSessionId
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter x-applecloudextension-session-id is required, but not found"))
	}
	// ------------- Optional header parameter "x-applecloudextension-retry-count" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-applecloudextension-retry-count")]; found {
		var XApplecloudextensionRetryCount int
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x-applecloudextension-retry-count, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "x-applecloudextension-retry-count", runtime.ParamLocationHeader, valueList[0], &XApplecloudextensionRetryCount)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x-applecloudextension-retry-count: %s", err))
		}

		params.XApplecloudextensionRetryCount = &XApplecloudextensionRetryCount
	}
	// ------------- Required header parameter "Request-Timeout" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Request-Timeout")]; found {
		var RequestTimeout int
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Request-Timeout, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "Request-Timeout", runtime.ParamLocationHeader, valueList[0], &RequestTimeout)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Request-Timeout: %s", err))
		}

		params.RequestTimeout = RequestTimeout
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter Request-Timeout is required, but not found"))
	}
	// ------------- Required header parameter "User-Agent" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("User-Agent")]; found {
		var UserAgent string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for User-Agent, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "User-Agent", runtime.ParamLocationHeader, valueList[0], &UserAgent)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter User-Agent: %s", err))
		}

		params.UserAgent = UserAgent
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter User-Agent is required, but not found"))
	}
	// ------------- Required header parameter "Accept-Language" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Accept-Language")]; found {
		var AcceptLanguage string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Accept-Language, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, valueList[0], &AcceptLanguage)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Accept-Language: %s", err))
		}

		params.AcceptLanguage = AcceptLanguage
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter Accept-Language is required, but not found"))
	}
	// ------------- Optional header parameter "If-None-Match" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-None-Match")]; found {
		var IfNoneMatch ExtensionConfigTag
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for If-None-Match, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "If-None-Match", runtime.ParamLocationHeader, valueList[0], &IfNoneMatch)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter If-None-Match: %s", err))
		}

		params.IfNoneMatch = &IfNoneMatch
	}
	// ------------- Required header parameter "Cache-Control" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Cache-Control")]; found {
		var CacheControl string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Cache-Control, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "Cache-Control", runtime.ParamLocationHeader, valueList[0], &CacheControl)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Cache-Control: %s", err))
		}

		params.CacheControl = CacheControl
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter Cache-Control is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ExtensionConfiguration(ctx, params)
	return err
}

// AddMediaIntentHandling converts echo context to params.
func (w *ServerInterfaceWrapper) AddMediaIntentHandling(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params AddMediaIntentHandlingParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "x-applecloudextension-session-id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-applecloudextension-session-id")]; found {
		var XApplecloudextensionSessionId string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x-applecloudextension-session-id, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "x-applecloudextension-session-id", runtime.ParamLocationHeader, valueList[0], &XApplecloudextensionSessionId)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x-applecloudextension-session-id: %s", err))
		}

		params.XApplecloudextensionSessionId = XApplecloudextensionSessionId
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter x-applecloudextension-session-id is required, but not found"))
	}
	// ------------- Optional header parameter "x-applecloudextension-retry-count" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-applecloudextension-retry-count")]; found {
		var XApplecloudextensionRetryCount int
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x-applecloudextension-retry-count, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "x-applecloudextension-retry-count", runtime.ParamLocationHeader, valueList[0], &XApplecloudextensionRetryCount)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x-applecloudextension-retry-count: %s", err))
		}

		params.XApplecloudextensionRetryCount = &XApplecloudextensionRetryCount
	}
	// ------------- Required header parameter "Request-Timeout" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Request-Timeout")]; found {
		var RequestTimeout int
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Request-Timeout, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "Request-Timeout", runtime.ParamLocationHeader, valueList[0], &RequestTimeout)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Request-Timeout: %s", err))
		}

		params.RequestTimeout = RequestTimeout
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter Request-Timeout is required, but not found"))
	}
	// ------------- Required header parameter "User-Agent" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("User-Agent")]; found {
		var UserAgent string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for User-Agent, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "User-Agent", runtime.ParamLocationHeader, valueList[0], &UserAgent)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter User-Agent: %s", err))
		}

		params.UserAgent = UserAgent
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter User-Agent is required, but not found"))
	}
	// ------------- Required header parameter "Accept-Language" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Accept-Language")]; found {
		var AcceptLanguage string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Accept-Language, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, valueList[0], &AcceptLanguage)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Accept-Language: %s", err))
		}

		params.AcceptLanguage = AcceptLanguage
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter Accept-Language is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddMediaIntentHandling(ctx, params)
	return err
}

// PlayMediaIntentHandling converts echo context to params.
func (w *ServerInterfaceWrapper) PlayMediaIntentHandling(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PlayMediaIntentHandlingParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "x-applecloudextension-session-id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-applecloudextension-session-id")]; found {
		var XApplecloudextensionSessionId string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x-applecloudextension-session-id, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "x-applecloudextension-session-id", runtime.ParamLocationHeader, valueList[0], &XApplecloudextensionSessionId)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x-applecloudextension-session-id: %s", err))
		}

		params.XApplecloudextensionSessionId = XApplecloudextensionSessionId
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter x-applecloudextension-session-id is required, but not found"))
	}
	// ------------- Optional header parameter "x-applecloudextension-retry-count" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-applecloudextension-retry-count")]; found {
		var XApplecloudextensionRetryCount int
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x-applecloudextension-retry-count, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "x-applecloudextension-retry-count", runtime.ParamLocationHeader, valueList[0], &XApplecloudextensionRetryCount)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x-applecloudextension-retry-count: %s", err))
		}

		params.XApplecloudextensionRetryCount = &XApplecloudextensionRetryCount
	}
	// ------------- Required header parameter "Request-Timeout" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Request-Timeout")]; found {
		var RequestTimeout int
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Request-Timeout, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "Request-Timeout", runtime.ParamLocationHeader, valueList[0], &RequestTimeout)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Request-Timeout: %s", err))
		}

		params.RequestTimeout = RequestTimeout
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter Request-Timeout is required, but not found"))
	}
	// ------------- Required header parameter "User-Agent" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("User-Agent")]; found {
		var UserAgent string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for User-Agent, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "User-Agent", runtime.ParamLocationHeader, valueList[0], &UserAgent)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter User-Agent: %s", err))
		}

		params.UserAgent = UserAgent
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter User-Agent is required, but not found"))
	}
	// ------------- Required header parameter "Accept-Language" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Accept-Language")]; found {
		var AcceptLanguage string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Accept-Language, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, valueList[0], &AcceptLanguage)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Accept-Language: %s", err))
		}

		params.AcceptLanguage = AcceptLanguage
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter Accept-Language is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PlayMediaIntentHandling(ctx, params)
	return err
}

// UpdateMediaAffinityIntentHandling converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateMediaAffinityIntentHandling(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params UpdateMediaAffinityIntentHandlingParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "x-applecloudextension-session-id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-applecloudextension-session-id")]; found {
		var XApplecloudextensionSessionId string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x-applecloudextension-session-id, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "x-applecloudextension-session-id", runtime.ParamLocationHeader, valueList[0], &XApplecloudextensionSessionId)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x-applecloudextension-session-id: %s", err))
		}

		params.XApplecloudextensionSessionId = XApplecloudextensionSessionId
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter x-applecloudextension-session-id is required, but not found"))
	}
	// ------------- Optional header parameter "x-applecloudextension-retry-count" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-applecloudextension-retry-count")]; found {
		var XApplecloudextensionRetryCount int
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x-applecloudextension-retry-count, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "x-applecloudextension-retry-count", runtime.ParamLocationHeader, valueList[0], &XApplecloudextensionRetryCount)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x-applecloudextension-retry-count: %s", err))
		}

		params.XApplecloudextensionRetryCount = &XApplecloudextensionRetryCount
	}
	// ------------- Required header parameter "Request-Timeout" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Request-Timeout")]; found {
		var RequestTimeout int
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Request-Timeout, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "Request-Timeout", runtime.ParamLocationHeader, valueList[0], &RequestTimeout)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Request-Timeout: %s", err))
		}

		params.RequestTimeout = RequestTimeout
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter Request-Timeout is required, but not found"))
	}
	// ------------- Required header parameter "User-Agent" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("User-Agent")]; found {
		var UserAgent string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for User-Agent, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "User-Agent", runtime.ParamLocationHeader, valueList[0], &UserAgent)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter User-Agent: %s", err))
		}

		params.UserAgent = UserAgent
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter User-Agent is required, but not found"))
	}
	// ------------- Required header parameter "Accept-Language" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Accept-Language")]; found {
		var AcceptLanguage string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Accept-Language, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, valueList[0], &AcceptLanguage)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Accept-Language: %s", err))
		}

		params.AcceptLanguage = AcceptLanguage
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter Accept-Language is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateMediaAffinityIntentHandling(ctx, params)
	return err
}

// PlayMediaOnQueue converts echo context to params.
func (w *ServerInterfaceWrapper) PlayMediaOnQueue(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PlayMediaOnQueueParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "x-applecloudextension-session-id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-applecloudextension-session-id")]; found {
		var XApplecloudextensionSessionId string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x-applecloudextension-session-id, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "x-applecloudextension-session-id", runtime.ParamLocationHeader, valueList[0], &XApplecloudextensionSessionId)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x-applecloudextension-session-id: %s", err))
		}

		params.XApplecloudextensionSessionId = XApplecloudextensionSessionId
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter x-applecloudextension-session-id is required, but not found"))
	}
	// ------------- Optional header parameter "x-applecloudextension-retry-count" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-applecloudextension-retry-count")]; found {
		var XApplecloudextensionRetryCount int
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x-applecloudextension-retry-count, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "x-applecloudextension-retry-count", runtime.ParamLocationHeader, valueList[0], &XApplecloudextensionRetryCount)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x-applecloudextension-retry-count: %s", err))
		}

		params.XApplecloudextensionRetryCount = &XApplecloudextensionRetryCount
	}
	// ------------- Required header parameter "User-Agent" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("User-Agent")]; found {
		var UserAgent string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for User-Agent, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "User-Agent", runtime.ParamLocationHeader, valueList[0], &UserAgent)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter User-Agent: %s", err))
		}

		params.UserAgent = UserAgent
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter User-Agent is required, but not found"))
	}
	// ------------- Required header parameter "Accept-Language" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Accept-Language")]; found {
		var AcceptLanguage string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Accept-Language, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, valueList[0], &AcceptLanguage)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Accept-Language: %s", err))
		}

		params.AcceptLanguage = AcceptLanguage
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter Accept-Language is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PlayMediaOnQueue(ctx, params)
	return err
}

// UpdateActivityOnQueue converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateActivityOnQueue(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params UpdateActivityOnQueueParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "x-applecloudextension-session-id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-applecloudextension-session-id")]; found {
		var XApplecloudextensionSessionId string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x-applecloudextension-session-id, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "x-applecloudextension-session-id", runtime.ParamLocationHeader, valueList[0], &XApplecloudextensionSessionId)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x-applecloudextension-session-id: %s", err))
		}

		params.XApplecloudextensionSessionId = XApplecloudextensionSessionId
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter x-applecloudextension-session-id is required, but not found"))
	}
	// ------------- Optional header parameter "x-applecloudextension-retry-count" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-applecloudextension-retry-count")]; found {
		var XApplecloudextensionRetryCount int
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for x-applecloudextension-retry-count, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "x-applecloudextension-retry-count", runtime.ParamLocationHeader, valueList[0], &XApplecloudextensionRetryCount)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter x-applecloudextension-retry-count: %s", err))
		}

		params.XApplecloudextensionRetryCount = &XApplecloudextensionRetryCount
	}
	// ------------- Required header parameter "User-Agent" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("User-Agent")]; found {
		var UserAgent string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for User-Agent, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "User-Agent", runtime.ParamLocationHeader, valueList[0], &UserAgent)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter User-Agent: %s", err))
		}

		params.UserAgent = UserAgent
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter User-Agent is required, but not found"))
	}
	// ------------- Required header parameter "Accept-Language" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Accept-Language")]; found {
		var AcceptLanguage string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Accept-Language, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, valueList[0], &AcceptLanguage)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Accept-Language: %s", err))
		}

		params.AcceptLanguage = AcceptLanguage
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter Accept-Language is required, but not found"))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateActivityOnQueue(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/configuration", wrapper.ExtensionConfiguration)
	router.POST(baseURL+"/intent/addMedia", wrapper.AddMediaIntentHandling)
	router.POST(baseURL+"/intent/playMedia", wrapper.PlayMediaIntentHandling)
	router.POST(baseURL+"/intent/updateMediaAffinity", wrapper.UpdateMediaAffinityIntentHandling)
	router.POST(baseURL+"/queues/playMedia", wrapper.PlayMediaOnQueue)
	router.POST(baseURL+"/queues/updateActivity", wrapper.UpdateActivityOnQueue)

}
