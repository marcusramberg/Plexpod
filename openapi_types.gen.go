// Package main provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.3 DO NOT EDIT.
package main

import (
	"encoding/json"
	"fmt"
	"time"
)

// Defines values for AddMediaIntentResponseCode.
const (
	AddMediaIntentResponseCodeFailure AddMediaIntentResponseCode = "failure"

	AddMediaIntentResponseCodeFailureRequiringAppLaunch AddMediaIntentResponseCode = "failureRequiringAppLaunch"

	AddMediaIntentResponseCodeInProgress AddMediaIntentResponseCode = "inProgress"

	AddMediaIntentResponseCodeReady AddMediaIntentResponseCode = "ready"

	AddMediaIntentResponseCodeSuccess AddMediaIntentResponseCode = "success"

	AddMediaIntentResponseCodeUnspecified AddMediaIntentResponseCode = "unspecified"
)

// Defines values for AddMediaMediaDestinationUnsupportedReason.
const (
	AddMediaMediaDestinationUnsupportedReasonPlaylistNameNotFound AddMediaMediaDestinationUnsupportedReason = "playlistNameNotFound"

	AddMediaMediaDestinationUnsupportedReasonPlaylistNotEditable AddMediaMediaDestinationUnsupportedReason = "playlistNotEditable"
)

// Defines values for AddMediaMediaItemUnsupportedReason.
const (
	AddMediaMediaItemUnsupportedReasonExplicitContentSettings AddMediaMediaItemUnsupportedReason = "explicitContentSettings"

	AddMediaMediaItemUnsupportedReasonLoginRequired AddMediaMediaItemUnsupportedReason = "loginRequired"

	AddMediaMediaItemUnsupportedReasonRegionRestriction AddMediaMediaItemUnsupportedReason = "regionRestriction"

	AddMediaMediaItemUnsupportedReasonRestrictedContent AddMediaMediaItemUnsupportedReason = "restrictedContent"

	AddMediaMediaItemUnsupportedReasonSubscriptionRequired AddMediaMediaItemUnsupportedReason = "subscriptionRequired"

	AddMediaMediaItemUnsupportedReasonUnsupportedMediaType AddMediaMediaItemUnsupportedReason = "unsupportedMediaType"
)

// Defines values for MediaAffinityType.
const (
	MediaAffinityTypeDislike MediaAffinityType = "dislike"

	MediaAffinityTypeLike MediaAffinityType = "like"

	MediaAffinityTypeUnknown MediaAffinityType = "unknown"
)

// Defines values for MediaDestinationMediaDestinationType.
const (
	MediaDestinationMediaDestinationTypeLibrary MediaDestinationMediaDestinationType = "library"

	MediaDestinationMediaDestinationTypePlaylist MediaDestinationMediaDestinationType = "playlist"
)

// Defines values for MediaItemType.
const (
	MediaItemTypeAlbum MediaItemType = "album"

	MediaItemTypeAlgorithmicRadioStation MediaItemType = "algorithmicRadioStation"

	MediaItemTypeArtist MediaItemType = "artist"

	MediaItemTypeAudioBook MediaItemType = "audioBook"

	MediaItemTypeGenre MediaItemType = "genre"

	MediaItemTypeMovie MediaItemType = "movie"

	MediaItemTypeMusic MediaItemType = "music"

	MediaItemTypeMusicStation MediaItemType = "musicStation"

	MediaItemTypeMusicVideo MediaItemType = "musicVideo"

	MediaItemTypeNews MediaItemType = "news"

	MediaItemTypePlaylist MediaItemType = "playlist"

	MediaItemTypePodcastEpisode MediaItemType = "podcastEpisode"

	MediaItemTypePodcastPlaylist MediaItemType = "podcastPlaylist"

	MediaItemTypePodcastShow MediaItemType = "podcastShow"

	MediaItemTypePodcastStation MediaItemType = "podcastStation"

	MediaItemTypeRadioStation MediaItemType = "radioStation"

	MediaItemTypeSong MediaItemType = "song"

	MediaItemTypeStation MediaItemType = "station"

	MediaItemTypeTvShow MediaItemType = "tvShow"

	MediaItemTypeTvShowEpisode MediaItemType = "tvShowEpisode"

	MediaItemTypeUnknown MediaItemType = "unknown"
)

// Defines values for MediaReference.
const (
	MediaReferenceCurrentlyPlaying MediaReference = "currentlyPlaying"

	MediaReferenceMy MediaReference = "my"

	MediaReferenceUnknown MediaReference = "unknown"
)

// Defines values for MediaSortOrder.
const (
	MediaSortOrderBest MediaSortOrder = "best"

	MediaSortOrderNewest MediaSortOrder = "newest"

	MediaSortOrderOldest MediaSortOrder = "oldest"

	MediaSortOrderPopular MediaSortOrder = "popular"

	MediaSortOrderRecommended MediaSortOrder = "recommended"

	MediaSortOrderTrending MediaSortOrder = "trending"

	MediaSortOrderUnknown MediaSortOrder = "unknown"

	MediaSortOrderUnpopular MediaSortOrder = "unpopular"

	MediaSortOrderWorst MediaSortOrder = "worst"
)

// Defines values for PlayMediaControlScheme.
const (
	PlayMediaControlSchemeAdvertisement PlayMediaControlScheme = "advertisement"

	PlayMediaControlSchemeAudioBook PlayMediaControlScheme = "audioBook"

	PlayMediaControlSchemeCustom PlayMediaControlScheme = "custom"

	PlayMediaControlSchemeInternetRadio PlayMediaControlScheme = "internetRadio"

	PlayMediaControlSchemeLiveStreaming PlayMediaControlScheme = "liveStreaming"

	PlayMediaControlSchemeOnDemand PlayMediaControlScheme = "onDemand"

	PlayMediaControlSchemePodcast PlayMediaControlScheme = "podcast"
)

// Defines values for PlayMediaIntentResponseCode.
const (
	PlayMediaIntentResponseCodeFailure PlayMediaIntentResponseCode = "failure"

	PlayMediaIntentResponseCodeFailureNoUnplayedContent PlayMediaIntentResponseCode = "failureNoUnplayedContent"

	PlayMediaIntentResponseCodeFailureRequiringAppLaunch PlayMediaIntentResponseCode = "failureRequiringAppLaunch"

	PlayMediaIntentResponseCodeFailureRestrictedContent PlayMediaIntentResponseCode = "failureRestrictedContent"

	PlayMediaIntentResponseCodeFailureUnknownMediaType PlayMediaIntentResponseCode = "failureUnknownMediaType"

	PlayMediaIntentResponseCodeSuccess PlayMediaIntentResponseCode = "success"

	PlayMediaIntentResponseCodeUnspecified PlayMediaIntentResponseCode = "unspecified"
)

// Defines values for PlayMediaMediaItemUnsupportedReason.
const (
	PlayMediaMediaItemUnsupportedReasonExplicitContentSettings PlayMediaMediaItemUnsupportedReason = "explicitContentSettings"

	PlayMediaMediaItemUnsupportedReasonLoginRequired PlayMediaMediaItemUnsupportedReason = "loginRequired"

	PlayMediaMediaItemUnsupportedReasonRegionRestriction PlayMediaMediaItemUnsupportedReason = "regionRestriction"

	PlayMediaMediaItemUnsupportedReasonRestrictedContent PlayMediaMediaItemUnsupportedReason = "restrictedContent"

	PlayMediaMediaItemUnsupportedReasonSubscriptionRequired PlayMediaMediaItemUnsupportedReason = "subscriptionRequired"

	PlayMediaMediaItemUnsupportedReasonUnsupportedMediaType PlayMediaMediaItemUnsupportedReason = "unsupportedMediaType"
)

// Defines values for PlaybackQueueLocation.
const (
	PlaybackQueueLocationLater PlaybackQueueLocation = "later"

	PlaybackQueueLocationNext PlaybackQueueLocation = "next"

	PlaybackQueueLocationNow PlaybackQueueLocation = "now"

	PlaybackQueueLocationUnknown PlaybackQueueLocation = "unknown"
)

// Defines values for PlaybackRepeatMode.
const (
	PlaybackRepeatModeAll PlaybackRepeatMode = "all"

	PlaybackRepeatModeNone PlaybackRepeatMode = "none"

	PlaybackRepeatModeOne PlaybackRepeatMode = "one"

	PlaybackRepeatModeUnknown PlaybackRepeatMode = "unknown"
)

// Defines values for ProtocolExceptionReason.
const (
	ProtocolExceptionReasonBusy ProtocolExceptionReason = "busy"

	ProtocolExceptionReasonComplex ProtocolExceptionReason = "complex"

	ProtocolExceptionReasonDeprecated ProtocolExceptionReason = "deprecated"

	ProtocolExceptionReasonInternal ProtocolExceptionReason = "internal"

	ProtocolExceptionReasonInvalid ProtocolExceptionReason = "invalid"

	ProtocolExceptionReasonUnauthorized ProtocolExceptionReason = "unauthorized"

	ProtocolExceptionReasonUnexpected ProtocolExceptionReason = "unexpected"

	ProtocolExceptionReasonUnparseable ProtocolExceptionReason = "unparseable"

	ProtocolExceptionReasonUnsupported ProtocolExceptionReason = "unsupported"
)

// Defines values for QueueActivityReportEvent.
const (
	QueueActivityReportEventLocalCommandBookmark QueueActivityReportEvent = "local.command.bookmark"

	QueueActivityReportEventLocalCommandDislike QueueActivityReportEvent = "local.command.dislike"

	QueueActivityReportEventLocalCommandLike QueueActivityReportEvent = "local.command.like"

	QueueActivityReportEventLocalPlayingContinued QueueActivityReportEvent = "local.playing.continued"

	QueueActivityReportEventLocalPlayingElapsed QueueActivityReportEvent = "local.playing.elapsed"

	QueueActivityReportEventLocalPlayingFastForward QueueActivityReportEvent = "local.playing.fastForward"

	QueueActivityReportEventLocalPlayingFastRewind QueueActivityReportEvent = "local.playing.fastRewind"

	QueueActivityReportEventLocalPlayingPaused QueueActivityReportEvent = "local.playing.paused"

	QueueActivityReportEventLocalPlayingScrub QueueActivityReportEvent = "local.playing.scrub"

	QueueActivityReportEventLocalPlayingTransitionedNaturally QueueActivityReportEvent = "local.playing.transitioned.naturally"

	QueueActivityReportEventLocalPlayingTransitionedQueueReplaced QueueActivityReportEvent = "local.playing.transitioned.queue_replaced"

	QueueActivityReportEventLocalPlayingTransitionedSkipNext QueueActivityReportEvent = "local.playing.transitioned.skip_next"

	QueueActivityReportEventLocalPlayingTransitionedSkipPrevious QueueActivityReportEvent = "local.playing.transitioned.skip_previous"

	QueueActivityReportEventLocalStoppedNaturally QueueActivityReportEvent = "local.stopped.naturally"

	QueueActivityReportEventLocalStoppedSkipPastEnd QueueActivityReportEvent = "local.stopped.skip_past_end"
)

// Defines values for UpdateMediaAffinityIntentResponseCode.
const (
	UpdateMediaAffinityIntentResponseCodeFailure UpdateMediaAffinityIntentResponseCode = "failure"

	UpdateMediaAffinityIntentResponseCodeFailureRequiringAppLaunch UpdateMediaAffinityIntentResponseCode = "failureRequiringAppLaunch"

	UpdateMediaAffinityIntentResponseCodeInProgress UpdateMediaAffinityIntentResponseCode = "inProgress"

	UpdateMediaAffinityIntentResponseCodeSuccess UpdateMediaAffinityIntentResponseCode = "success"

	UpdateMediaAffinityIntentResponseCodeUnspecified UpdateMediaAffinityIntentResponseCode = "unspecified"
)

// Defines values for UpdateMediaAffinityMediaItemUnsupportedReason.
const (
	UpdateMediaAffinityMediaItemUnsupportedReasonExplicitContentSettings UpdateMediaAffinityMediaItemUnsupportedReason = "explicitContentSettings"

	UpdateMediaAffinityMediaItemUnsupportedReasonLoginRequired UpdateMediaAffinityMediaItemUnsupportedReason = "loginRequired"

	UpdateMediaAffinityMediaItemUnsupportedReasonSubscriptionRequired UpdateMediaAffinityMediaItemUnsupportedReason = "subscriptionRequired"

	UpdateMediaAffinityMediaItemUnsupportedReasonUnsupportedMediaType UpdateMediaAffinityMediaItemUnsupportedReason = "unsupportedMediaType"
)

// AddMediaIntent defines model for AddMediaIntent.
type AddMediaIntent struct {
	// Embedded struct due to allOf(#/components/schemas/Intent)
	Intent `yaml:",inline"`
}

// AddMediaIntentHandlingConfirmInvocationResponse defines model for AddMediaIntentHandlingConfirmInvocationResponse.
type AddMediaIntentHandlingConfirmInvocationResponse struct {
	// Embedded struct due to allOf(#/components/schemas/InvocationResponse)
	InvocationResponse `yaml:",inline"`
}

// AddMediaIntentHandlingHandleInvocationResponse defines model for AddMediaIntentHandlingHandleInvocationResponse.
type AddMediaIntentHandlingHandleInvocationResponse struct {
	// Embedded struct due to allOf(#/components/schemas/InvocationResponse)
	InvocationResponse `yaml:",inline"`
}

// AddMediaIntentHandlingInvocation defines model for AddMediaIntentHandlingInvocation.
type AddMediaIntentHandlingInvocation struct {
	// Embedded struct due to allOf(#/components/schemas/Invocation)
	Invocation `yaml:",inline"`
}

// AddMediaIntentHandlingInvocationResponse defines model for AddMediaIntentHandlingInvocationResponse.
type AddMediaIntentHandlingInvocationResponse interface{}

// AddMediaIntentHandlingResolveMediaDestinationInvocationResponse defines model for AddMediaIntentHandlingResolveMediaDestinationInvocationResponse.
type AddMediaIntentHandlingResolveMediaDestinationInvocationResponse struct {
	// Embedded struct due to allOf(#/components/schemas/InvocationResponse)
	InvocationResponse `yaml:",inline"`
}

// AddMediaIntentHandlingResolveMediaItemsInvocationResponse defines model for AddMediaIntentHandlingResolveMediaItemsInvocationResponse.
type AddMediaIntentHandlingResolveMediaItemsInvocationResponse struct {
	// Embedded struct due to allOf(#/components/schemas/InvocationResponse)
	InvocationResponse `yaml:",inline"`
}

// AddMediaIntentResponse defines model for AddMediaIntentResponse.
type AddMediaIntentResponse struct {
	// Embedded struct due to allOf(#/components/schemas/IntentResponse)
	IntentResponse `yaml:",inline"`
}

// AddMediaIntentResponseCode defines model for AddMediaIntentResponseCode.
type AddMediaIntentResponseCode string

// AddMediaMediaDestinationResolutionResult defines model for AddMediaMediaDestinationResolutionResult.
type AddMediaMediaDestinationResolutionResult struct {
	// Embedded struct due to allOf(#/components/schemas/IntentResolutionResult)
	IntentResolutionResult `yaml:",inline"`
}

// AddMediaMediaDestinationUnsupportedReason defines model for AddMediaMediaDestinationUnsupportedReason.
type AddMediaMediaDestinationUnsupportedReason string

// AddMediaMediaItemResolutionResult defines model for AddMediaMediaItemResolutionResult.
type AddMediaMediaItemResolutionResult struct {
	// Embedded struct due to allOf(#/components/schemas/IntentResolutionResult)
	IntentResolutionResult `yaml:",inline"`
}

// AddMediaMediaItemUnsupportedReason defines model for AddMediaMediaItemUnsupportedReason.
type AddMediaMediaItemUnsupportedReason string

// BooleanResolutionResult defines model for BooleanResolutionResult.
type BooleanResolutionResult struct {
	// Embedded struct due to allOf(#/components/schemas/IntentResolutionResult)
	IntentResolutionResult `yaml:",inline"`
}

// Constraints defines model for Constraints.
type Constraints struct {
	AllowExplicitContent         *bool `json:"allowExplicitContent,omitempty"`
	MaximumQueueSegmentItemCount *int  `json:"maximumQueueSegmentItemCount,omitempty"`
	UpdateUserTasteProfile       *bool `json:"updateUserTasteProfile,omitempty"`
}

// Content defines model for Content.
type Content struct {
	Attributes *ContentAttributes `json:"attributes,omitempty"`
	Control    *string            `json:"control,omitempty"`
	Identifier ContentIdentifier  `json:"identifier"`
	IsLive     *bool              `json:"isLive,omitempty"`
	PlayIndex  *int               `json:"playIndex,omitempty"`
	Url        *string            `json:"url,omitempty"`
}

// ContentAttributes defines model for ContentAttributes.
type ContentAttributes struct {
	AlbumName  *string `json:"albumName,omitempty"`
	ArtistName *string `json:"artistName,omitempty"`
	Artwork    *struct {
		Url *string `json:"url,omitempty"`
	} `json:"artwork,omitempty"`
	ComposerName     *string   `json:"composerName,omitempty"`
	DurationInMillis *int      `json:"durationInMillis,omitempty"`
	GenreNames       *[]string `json:"genreNames,omitempty"`
	Name             *string   `json:"name,omitempty"`
	TrackNumber      *int      `json:"trackNumber,omitempty"`
}

// ContentIdentifier defines model for ContentIdentifier.
type ContentIdentifier string

// DateComponents defines model for DateComponents.
type DateComponents interface{}

// DateComponentsRange defines model for DateComponentsRange.
type DateComponentsRange struct {
	EndDateComponents   *DateComponents `json:"endDateComponents,omitempty"`
	StartDateComponents *DateComponents `json:"startDateComponents,omitempty"`
}

// ExecutionMetrics defines model for ExecutionMetrics.
type ExecutionMetrics struct {
	Completed *time.Time `json:"completed,omitempty"`
	Duration  *float32   `json:"duration,omitempty"`
	Received  *time.Time `json:"received,omitempty"`
}

// ExplicitDateComponents defines model for ExplicitDateComponents.
type ExplicitDateComponents struct {
	CalendarIdentifier *string `json:"calendarIdentifier,omitempty"`
	Day                *int32  `json:"day,omitempty"`
	Era                *int32  `json:"era,omitempty"`
	Hour               *int32  `json:"hour,omitempty"`
	Minute             *int32  `json:"minute,omitempty"`
	Month              *int32  `json:"month,omitempty"`
	Nanosecond         *int32  `json:"nanosecond,omitempty"`
	Second             *int32  `json:"second,omitempty"`
	TimeZone           *string `json:"timeZone,omitempty"`
	Year               *int32  `json:"year,omitempty"`
}

// ExtensionConfig defines model for ExtensionConfig.
type ExtensionConfig struct {
	Hdr    *map[string]interface{} `json:"hdr,omitempty"`
	Intent struct {
		AddMedia *struct {
			// Embedded struct due to allOf(#/components/schemas/ExtensionEndpointConfig)
			ExtensionEndpointConfig `yaml:",inline"`
		} `json:"addMedia,omitempty"`
		Hdr       *map[string]interface{} `json:"hdr,omitempty"`
		PlayMedia struct {
			// Embedded struct due to allOf(#/components/schemas/ExtensionEndpointConfig)
			ExtensionEndpointConfig `yaml:",inline"`
		} `json:"playMedia"`
		UpdateMediaAffinity *struct {
			// Embedded struct due to allOf(#/components/schemas/ExtensionEndpointConfig)
			ExtensionEndpointConfig `yaml:",inline"`
		} `json:"updateMediaAffinity,omitempty"`
	} `json:"intent"`
	Media struct {
		Queues *struct {
			Hdr       *map[string]interface{} `json:"hdr,omitempty"`
			PlayMedia *struct {
				Hdr *map[string]interface{} `json:"hdr,omitempty"`
				Url *string                 `json:"url,omitempty"`
			} `json:"playMedia,omitempty"`
			UpdateActivity *struct {
				Hdr *map[string]interface{} `json:"hdr,omitempty"`
				Url *string                 `json:"url,omitempty"`
			} `json:"updateActivity,omitempty"`
		} `json:"queues,omitempty"`
	} `json:"media"`
	Url     *string `json:"url,omitempty"`
	Version string  `json:"version"`
}

// ExtensionConfigTag defines model for ExtensionConfigTag.
type ExtensionConfigTag string

// ExtensionEndpointConfig defines model for ExtensionEndpointConfig.
type ExtensionEndpointConfig struct {
	Hdr *map[string]interface{} `json:"hdr,omitempty"`
	Url *string                 `json:"url,omitempty"`
}

// Intent defines model for Intent.
type Intent struct {
	Class      string `json:"class"`
	Identifier string `json:"identifier"`
}

// IntentResolutionResult defines model for IntentResolutionResult.
type IntentResolutionResult struct {
	Class       string                  `json:"class"`
	NeedsValue  *map[string]interface{} `json:"needsValue,omitempty"`
	NotRequired *map[string]interface{} `json:"notRequired,omitempty"`
	Unsupported *map[string]interface{} `json:"unsupported,omitempty"`
}

// IntentResponse defines model for IntentResponse.
type IntentResponse struct {
	Class        string        `json:"class"`
	UserActivity *UserActivity `json:"userActivity"`
}

// Invocation defines model for Invocation.
type Invocation struct {
	Method  string                  `json:"method"`
	Params  *map[string]interface{} `json:"params"`
	Session *Session                `json:"session,omitempty"`
}

// InvocationResponse defines model for InvocationResponse.
type InvocationResponse struct {
	Debug   *ServiceDebugReference  `json:"debug,omitempty"`
	Method  string                  `json:"method"`
	Metrics *ExecutionMetrics       `json:"metrics,omitempty"`
	Result  *map[string]interface{} `json:"result"`
}

// MediaAffinityType defines model for MediaAffinityType.
type MediaAffinityType string

// MediaAffinityTypeResolutionResult defines model for MediaAffinityTypeResolutionResult.
type MediaAffinityTypeResolutionResult struct {
	// Embedded struct due to allOf(#/components/schemas/IntentResolutionResult)
	IntentResolutionResult `yaml:",inline"`
}

// MediaDestination defines model for MediaDestination.
type MediaDestination struct {
	MediaDestinationType MediaDestinationMediaDestinationType `json:"mediaDestinationType"`
}

// MediaDestinationMediaDestinationType defines model for MediaDestination.MediaDestinationType.
type MediaDestinationMediaDestinationType string

// MediaItem defines model for MediaItem.
type MediaItem struct {
	Artist     *string       `json:"artist,omitempty"`
	Identifier string        `json:"identifier"`
	Title      *string       `json:"title,omitempty"`
	Type       MediaItemType `json:"type"`
}

// MediaItemType defines model for MediaItemType.
type MediaItemType string

// MediaReference defines model for MediaReference.
type MediaReference string

// MediaSearch defines model for MediaSearch.
type MediaSearch struct {
	AlbumName       *string              `json:"albumName,omitempty"`
	ArtistName      *string              `json:"artistName,omitempty"`
	GenreNames      *[]string            `json:"genreNames,omitempty"`
	MediaIdentifier *string              `json:"mediaIdentifier,omitempty"`
	MediaName       *string              `json:"mediaName,omitempty"`
	MediaType       *MediaItemType       `json:"mediaType,omitempty"`
	MoodNames       *[]string            `json:"moodNames,omitempty"`
	Reference       *MediaReference      `json:"reference,omitempty"`
	ReleaseDate     *DateComponentsRange `json:"releaseDate,omitempty"`
	SortOrder       *MediaSortOrder      `json:"sortOrder,omitempty"`
}

// MediaSortOrder defines model for MediaSortOrder.
type MediaSortOrder string

// PlayMediaControl defines model for PlayMediaControl.
type PlayMediaControl struct {
	Activity *PlayMediaControlActivity   `json:"activity,omitempty"`
	Commands *PlayMediaControlCommandSet `json:"commands,omitempty"`
	Scheme   PlayMediaControlScheme      `json:"scheme"`
}

// PlayMediaControlActivity defines model for PlayMediaControlActivity.
type PlayMediaControlActivity struct {
	PlayElapsed         *int `json:"playElapsed,omitempty"`
	PlayElapsedInterval *int `json:"playElapsedInterval,omitempty"`
	PlayPaused          *int `json:"playPaused,omitempty"`
}

// PlayMediaControlCommandSet defines model for PlayMediaControlCommandSet.
type PlayMediaControlCommandSet struct {
	BookmarkTrack          *bool `json:"bookmarkTrack,omitempty"`
	DislikeTrack           *bool `json:"dislikeTrack,omitempty"`
	LikeTrack              *bool `json:"likeTrack,omitempty"`
	NextTrack              *bool `json:"nextTrack,omitempty"`
	PreferSkipBackward     *bool `json:"preferSkipBackward,omitempty"`
	PreferSkipForward      *bool `json:"preferSkipForward,omitempty"`
	PreviousTrack          *bool `json:"previousTrack,omitempty"`
	SeekToPlaybackPosition *bool `json:"seekToPlaybackPosition,omitempty"`
	SkipBackward           *bool `json:"skipBackward,omitempty"`
	SkipForward            *bool `json:"skipForward,omitempty"`
}

// PlayMediaControlScheme defines model for PlayMediaControlScheme.
type PlayMediaControlScheme string

// PlayMediaIntent defines model for PlayMediaIntent.
type PlayMediaIntent struct {
	// Embedded struct due to allOf(#/components/schemas/Intent)
	Intent `yaml:",inline"`
}

// PlayMediaIntentHandlingHandleInvocationResponse defines model for PlayMediaIntentHandlingHandleInvocationResponse.
type PlayMediaIntentHandlingHandleInvocationResponse struct {
	// Embedded struct due to allOf(#/components/schemas/InvocationResponse)
	InvocationResponse `yaml:",inline"`
}

// PlayMediaIntentHandlingInvocation defines model for PlayMediaIntentHandlingInvocation.
type PlayMediaIntentHandlingInvocation struct {
	// Embedded struct due to allOf(#/components/schemas/Invocation)
	Invocation `yaml:",inline"`
}

// PlayMediaIntentHandlingInvocationResponse defines model for PlayMediaIntentHandlingInvocationResponse.
type PlayMediaIntentHandlingInvocationResponse interface{}

// PlayMediaIntentHandlingResolveMediaItemsInvocationResponse defines model for PlayMediaIntentHandlingResolveMediaItemsInvocationResponse.
type PlayMediaIntentHandlingResolveMediaItemsInvocationResponse struct {
	// Embedded struct due to allOf(#/components/schemas/InvocationResponse)
	InvocationResponse `yaml:",inline"`
}

// PlayMediaIntentHandlingResolvePlayShuffledInvocationResponse defines model for PlayMediaIntentHandlingResolvePlayShuffledInvocationResponse.
type PlayMediaIntentHandlingResolvePlayShuffledInvocationResponse struct {
	// Embedded struct due to allOf(#/components/schemas/InvocationResponse)
	InvocationResponse `yaml:",inline"`
}

// PlayMediaIntentHandlingResolvePlaybackQueueLocationInvocationResponse defines model for PlayMediaIntentHandlingResolvePlaybackQueueLocationInvocationResponse.
type PlayMediaIntentHandlingResolvePlaybackQueueLocationInvocationResponse struct {
	// Embedded struct due to allOf(#/components/schemas/InvocationResponse)
	InvocationResponse `yaml:",inline"`
}

// PlayMediaIntentHandlingResolvePlaybackRepeatModeInvocationResponse defines model for PlayMediaIntentHandlingResolvePlaybackRepeatModeInvocationResponse.
type PlayMediaIntentHandlingResolvePlaybackRepeatModeInvocationResponse struct {
	// Embedded struct due to allOf(#/components/schemas/InvocationResponse)
	InvocationResponse `yaml:",inline"`
}

// PlayMediaIntentHandlingResolveResumePlaybackInvocationResponse defines model for PlayMediaIntentHandlingResolveResumePlaybackInvocationResponse.
type PlayMediaIntentHandlingResolveResumePlaybackInvocationResponse struct {
	// Embedded struct due to allOf(#/components/schemas/InvocationResponse)
	InvocationResponse `yaml:",inline"`
}

// PlayMediaIntentResponse defines model for PlayMediaIntentResponse.
type PlayMediaIntentResponse struct {
	// Embedded struct due to allOf(#/components/schemas/IntentResponse)
	IntentResponse `yaml:",inline"`
}

// PlayMediaIntentResponseCode defines model for PlayMediaIntentResponseCode.
type PlayMediaIntentResponseCode string

// PlayMediaMediaItemResolutionResult defines model for PlayMediaMediaItemResolutionResult.
type PlayMediaMediaItemResolutionResult struct {
	// Embedded struct due to allOf(#/components/schemas/IntentResolutionResult)
	IntentResolutionResult `yaml:",inline"`
}

// PlayMediaMediaItemUnsupportedReason defines model for PlayMediaMediaItemUnsupportedReason.
type PlayMediaMediaItemUnsupportedReason string

// PlayMediaRequest defines model for PlayMediaRequest.
type PlayMediaRequest struct {
	Constraints  Constraints   `json:"constraints"`
	UserActivity *UserActivity `json:"userActivity"`
	Version      string        `json:"version"`
}

// PlaybackQueueLocation defines model for PlaybackQueueLocation.
type PlaybackQueueLocation string

// PlaybackQueueLocationResolutionResult defines model for PlaybackQueueLocationResolutionResult.
type PlaybackQueueLocationResolutionResult struct {
	// Embedded struct due to allOf(#/components/schemas/IntentResolutionResult)
	IntentResolutionResult `yaml:",inline"`
}

// PlaybackRepeatMode defines model for PlaybackRepeatMode.
type PlaybackRepeatMode string

// PlaybackRepeatModeResolutionResult defines model for PlaybackRepeatModeResolutionResult.
type PlaybackRepeatModeResolutionResult struct {
	// Embedded struct due to allOf(#/components/schemas/IntentResolutionResult)
	IntentResolutionResult `yaml:",inline"`
}

// PlayerContext defines model for PlayerContext.
type PlayerContext struct {
	ActivityIdentifier *string            `json:"activityIdentifier,omitempty"`
	ContentIdentifier  *ContentIdentifier `json:"contentIdentifier,omitempty"`
	OffsetInMillis     *int64             `json:"offsetInMillis,omitempty"`
	PlaybackSpeed      *float64           `json:"playbackSpeed,omitempty"`
	QueueIdentifier    *QueueIdentifier   `json:"queueIdentifier,omitempty"`
}

// ProtocolException defines model for ProtocolException.
type ProtocolException struct {
	Code           *int64                  `json:"code,omitempty"`
	MethodIndex    *int                    `json:"methodIndex,omitempty"`
	MethodName     *string                 `json:"methodName,omitempty"`
	Reason         ProtocolExceptionReason `json:"reason"`
	RetryWithDelay *float32                `json:"retryWithDelay,omitempty"`
	Trace          *[]string               `json:"trace,omitempty"`
}

// ProtocolExceptionInvocationResponse defines model for ProtocolExceptionInvocationResponse.
type ProtocolExceptionInvocationResponse struct {
	// Embedded struct due to allOf(#/components/schemas/InvocationResponse)
	InvocationResponse `yaml:",inline"`
}

// ProtocolExceptionReason defines model for ProtocolExceptionReason.
type ProtocolExceptionReason string

// Queue defines model for Queue.
type Queue struct {
	Content            []Content            `json:"content"`
	ContentItemsCount  *int                 `json:"contentItemsCount"`
	Controls           *QueueControlMapping `json:"controls,omitempty"`
	Identifier         QueueIdentifier      `json:"identifier"`
	InsertPointer      *QueueInsertPointer  `json:"insertPointer,omitempty"`
	NextContentUrl     *string              `json:"nextContentUrl"`
	PlayPointer        *QueuePlayPointer    `json:"playPointer"`
	PrerollSeconds     *float64             `json:"prerollSeconds,omitempty"`
	PreviousContentUrl *string              `json:"previousContentUrl"`
	SkipsRemaining     *int                 `json:"skipsRemaining"`
	Version            string               `json:"version"`
}

// QueueActivityReportEvent defines model for QueueActivityReportEvent.
type QueueActivityReportEvent string

// QueueControlMapping defines model for QueueControlMapping.
type QueueControlMapping struct {
	Default              PlayMediaControl            `json:"default"`
	AdditionalProperties map[string]PlayMediaControl `json:"-"`
}

// QueueIdentifier defines model for QueueIdentifier.
type QueueIdentifier string

// QueueInsertPointer defines model for QueueInsertPointer.
type QueueInsertPointer struct {
	AfterIdentifier *ContentIdentifier `json:"afterIdentifier,omitempty"`
	Replace         *bool              `json:"replace,omitempty"`
}

// QueuePlayPointer defines model for QueuePlayPointer.
type QueuePlayPointer struct {
	ContentIdentifier *ContentIdentifier `json:"contentIdentifier,omitempty"`
	OffsetInMillis    *int64             `json:"offsetInMillis,omitempty"`
}

// ServiceDebugReference defines model for ServiceDebugReference.
type ServiceDebugReference string

// Session defines model for Session.
type Session struct {
	Constraints   Constraints    `json:"constraints"`
	Deadline      time.Time      `json:"deadline"`
	Identifier    string         `json:"identifier"`
	PlayerContext *PlayerContext `json:"playerContext,omitempty"`
	Requested     time.Time      `json:"requested"`
	Version       string         `json:"version"`
}

// UpdateActivityRequest defines model for UpdateActivityRequest.
type UpdateActivityRequest struct {
	Constraints       *Constraints             `json:"constraints,omitempty"`
	NowPlaying        *PlayerContext           `json:"nowPlaying,omitempty"`
	PreviouslyPlaying *PlayerContext           `json:"previouslyPlaying,omitempty"`
	Report            QueueActivityReportEvent `json:"report"`
	Timestamp         time.Time                `json:"timestamp"`
	UserActivity      *UserActivity            `json:"userActivity"`
	Version           string                   `json:"version"`
}

// UpdateActivityResponse defines model for UpdateActivityResponse.
type UpdateActivityResponse struct {
	Queue        *Queue        `json:"queue,omitempty"`
	UserActivity *UserActivity `json:"userActivity"`
}

// UpdateMediaAffinityIntent defines model for UpdateMediaAffinityIntent.
type UpdateMediaAffinityIntent struct {
	// Embedded struct due to allOf(#/components/schemas/Intent)
	Intent `yaml:",inline"`
}

// UpdateMediaAffinityIntentHandlingHandleInvocationResponse defines model for UpdateMediaAffinityIntentHandlingHandleInvocationResponse.
type UpdateMediaAffinityIntentHandlingHandleInvocationResponse struct {
	// Embedded struct due to allOf(#/components/schemas/InvocationResponse)
	InvocationResponse `yaml:",inline"`
}

// UpdateMediaAffinityIntentHandlingInvocation defines model for UpdateMediaAffinityIntentHandlingInvocation.
type UpdateMediaAffinityIntentHandlingInvocation struct {
	// Embedded struct due to allOf(#/components/schemas/Invocation)
	Invocation `yaml:",inline"`
}

// UpdateMediaAffinityIntentHandlingInvocationResponse defines model for UpdateMediaAffinityIntentHandlingInvocationResponse.
type UpdateMediaAffinityIntentHandlingInvocationResponse interface{}

// UpdateMediaAffinityIntentHandlingResolveAffinityTypeInvocationResponse defines model for UpdateMediaAffinityIntentHandlingResolveAffinityTypeInvocationResponse.
type UpdateMediaAffinityIntentHandlingResolveAffinityTypeInvocationResponse struct {
	// Embedded struct due to allOf(#/components/schemas/InvocationResponse)
	InvocationResponse `yaml:",inline"`
}

// UpdateMediaAffinityIntentHandlingResolveMediaItemsInvocationResponse defines model for UpdateMediaAffinityIntentHandlingResolveMediaItemsInvocationResponse.
type UpdateMediaAffinityIntentHandlingResolveMediaItemsInvocationResponse struct {
	// Embedded struct due to allOf(#/components/schemas/InvocationResponse)
	InvocationResponse `yaml:",inline"`
}

// UpdateMediaAffinityIntentResponse defines model for UpdateMediaAffinityIntentResponse.
type UpdateMediaAffinityIntentResponse struct {
	// Embedded struct due to allOf(#/components/schemas/IntentResponse)
	IntentResponse `yaml:",inline"`
}

// UpdateMediaAffinityIntentResponseCode defines model for UpdateMediaAffinityIntentResponseCode.
type UpdateMediaAffinityIntentResponseCode string

// UpdateMediaAffinityMediaItemResolutionResult defines model for UpdateMediaAffinityMediaItemResolutionResult.
type UpdateMediaAffinityMediaItemResolutionResult struct {
	// Embedded struct due to allOf(#/components/schemas/IntentResolutionResult)
	IntentResolutionResult `yaml:",inline"`
}

// UpdateMediaAffinityMediaItemUnsupportedReason defines model for UpdateMediaAffinityMediaItemUnsupportedReason.
type UpdateMediaAffinityMediaItemUnsupportedReason string

// UserActivity defines model for UserActivity.
type UserActivity struct {
	ActivityType         string                  `json:"activityType"`
	PersistentIdentifier *string                 `json:"persistentIdentifier,omitempty"`
	Title                *string                 `json:"title,omitempty"`
	UserInfo             *map[string]interface{} `json:"userInfo,omitempty"`
	Version              string                  `json:"version"`
}

// ExtensionConfigurationParams defines parameters for ExtensionConfiguration.
type ExtensionConfigurationParams struct {
	XApplecloudextensionSessionId  string              `json:"x-applecloudextension-session-id"`
	XApplecloudextensionRetryCount *int                `json:"x-applecloudextension-retry-count,omitempty"`
	RequestTimeout                 int                 `json:"Request-Timeout"`
	UserAgent                      string              `json:"User-Agent"`
	AcceptLanguage                 string              `json:"Accept-Language"`
	IfNoneMatch                    *ExtensionConfigTag `json:"If-None-Match,omitempty"`
	CacheControl                   string              `json:"Cache-Control"`
}

// AddMediaIntentHandlingJSONBody defines parameters for AddMediaIntentHandling.
type AddMediaIntentHandlingJSONBody []AddMediaIntentHandlingInvocation

// AddMediaIntentHandlingParams defines parameters for AddMediaIntentHandling.
type AddMediaIntentHandlingParams struct {
	XApplecloudextensionSessionId  string `json:"x-applecloudextension-session-id"`
	XApplecloudextensionRetryCount *int   `json:"x-applecloudextension-retry-count,omitempty"`
	RequestTimeout                 int    `json:"Request-Timeout"`
	UserAgent                      string `json:"User-Agent"`
	AcceptLanguage                 string `json:"Accept-Language"`
}

// PlayMediaIntentHandlingJSONBody defines parameters for PlayMediaIntentHandling.
type PlayMediaIntentHandlingJSONBody []PlayMediaIntentHandlingInvocation

// PlayMediaIntentHandlingParams defines parameters for PlayMediaIntentHandling.
type PlayMediaIntentHandlingParams struct {
	XApplecloudextensionSessionId  string `json:"x-applecloudextension-session-id"`
	XApplecloudextensionRetryCount *int   `json:"x-applecloudextension-retry-count,omitempty"`
	RequestTimeout                 int    `json:"Request-Timeout"`
	UserAgent                      string `json:"User-Agent"`
	AcceptLanguage                 string `json:"Accept-Language"`
}

// UpdateMediaAffinityIntentHandlingJSONBody defines parameters for UpdateMediaAffinityIntentHandling.
type UpdateMediaAffinityIntentHandlingJSONBody []UpdateMediaAffinityIntentHandlingInvocation

// UpdateMediaAffinityIntentHandlingParams defines parameters for UpdateMediaAffinityIntentHandling.
type UpdateMediaAffinityIntentHandlingParams struct {
	XApplecloudextensionSessionId  string `json:"x-applecloudextension-session-id"`
	XApplecloudextensionRetryCount *int   `json:"x-applecloudextension-retry-count,omitempty"`
	RequestTimeout                 int    `json:"Request-Timeout"`
	UserAgent                      string `json:"User-Agent"`
	AcceptLanguage                 string `json:"Accept-Language"`
}

// PlayMediaOnQueueJSONBody defines parameters for PlayMediaOnQueue.
type PlayMediaOnQueueJSONBody PlayMediaRequest

// PlayMediaOnQueueParams defines parameters for PlayMediaOnQueue.
type PlayMediaOnQueueParams struct {
	XApplecloudextensionSessionId  string `json:"x-applecloudextension-session-id"`
	XApplecloudextensionRetryCount *int   `json:"x-applecloudextension-retry-count,omitempty"`
	UserAgent                      string `json:"User-Agent"`
	AcceptLanguage                 string `json:"Accept-Language"`
}

// UpdateActivityOnQueueJSONBody defines parameters for UpdateActivityOnQueue.
type UpdateActivityOnQueueJSONBody UpdateActivityRequest

// UpdateActivityOnQueueParams defines parameters for UpdateActivityOnQueue.
type UpdateActivityOnQueueParams struct {
	XApplecloudextensionSessionId  string `json:"x-applecloudextension-session-id"`
	XApplecloudextensionRetryCount *int   `json:"x-applecloudextension-retry-count,omitempty"`
	UserAgent                      string `json:"User-Agent"`
	AcceptLanguage                 string `json:"Accept-Language"`
}

// AddMediaIntentHandlingJSONRequestBody defines body for AddMediaIntentHandling for application/json ContentType.
type AddMediaIntentHandlingJSONRequestBody AddMediaIntentHandlingJSONBody

// PlayMediaIntentHandlingJSONRequestBody defines body for PlayMediaIntentHandling for application/json ContentType.
type PlayMediaIntentHandlingJSONRequestBody PlayMediaIntentHandlingJSONBody

// UpdateMediaAffinityIntentHandlingJSONRequestBody defines body for UpdateMediaAffinityIntentHandling for application/json ContentType.
type UpdateMediaAffinityIntentHandlingJSONRequestBody UpdateMediaAffinityIntentHandlingJSONBody

// PlayMediaOnQueueJSONRequestBody defines body for PlayMediaOnQueue for application/json ContentType.
type PlayMediaOnQueueJSONRequestBody PlayMediaOnQueueJSONBody

// UpdateActivityOnQueueJSONRequestBody defines body for UpdateActivityOnQueue for application/json ContentType.
type UpdateActivityOnQueueJSONRequestBody UpdateActivityOnQueueJSONBody

// Getter for additional properties for QueueControlMapping. Returns the specified
// element and whether it was found
func (a QueueControlMapping) Get(fieldName string) (value PlayMediaControl, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for QueueControlMapping
func (a *QueueControlMapping) Set(fieldName string, value PlayMediaControl) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]PlayMediaControl)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for QueueControlMapping to handle AdditionalProperties
func (a *QueueControlMapping) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["default"]; found {
		err = json.Unmarshal(raw, &a.Default)
		if err != nil {
			return fmt.Errorf("error reading 'default': %w", err)
		}
		delete(object, "default")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]PlayMediaControl)
		for fieldName, fieldBuf := range object {
			var fieldVal PlayMediaControl
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for QueueControlMapping to handle AdditionalProperties
func (a QueueControlMapping) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["default"], err = json.Marshal(a.Default)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'default': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}
